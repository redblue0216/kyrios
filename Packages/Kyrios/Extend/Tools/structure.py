# -*- coding: utf-8 -*-
# author:shihua
# coder:shihua
# 这是一个算法应用组件结构模块，主要提供结构设计功能，包括特定的数据结构，主要采用技术为图论
"""
模块介绍
-------

这是一个算法应用组件结构模块，主要提供结构设计功能，包括特定的数据结构，主要采用技术为图论

设计模式：

    （1）图论模式   

关键点：    

    （1）结构设计  

主要功能：            

    （1）结构设计                                                     

使用示例
-------


类说明
------

"""



####### 载入程序包 ##########################################################
############################################################################



import networkx as nx 



####### 算法应用结构模块 ####################################################
### 设计模式：                                                           ###
### （1）图论                                                            ###
### 关键点：                                                             ###
### （1）结构设计                                                         ###
### 主要功能：                                                            ###
### （1）结构设计                                                         ###
############################################################################



###### 基础模块类 #####################################################################
######################################################################################



class StarAtlas(object):
    """
    类介绍：

        这是一个结构描述类，主要使用图论来描述算法或节点结构，主要技术使用Networkx
    """


    def __init__(self):
        """
        属性功能:

            graph (Object): 图对象
            networkx (Object): networkx对象
        """

        self.graph = self.create_graph()
        self.networkx = nx


    def create_graph(self):
        """
        方法功能:

            定义一个创建图的方法

        参数：
            无

        返回：
            graph (Object): 图对象
        """

        graph = nx.DiGraph()
        
        return graph


    def graph_algorithm(self,algorithm):
        """
        方法功能：

            定义一个图算法执行接口

        参数：
            algorithm (str)：算法名称

        返回：
            视情况而定
        """

        if algorithm == 'toposort':
            toposort_list = list(nx.topological_sort(self.graph))
            return toposort_list
        else:
            return None



######################################################################################
######################################################################################


